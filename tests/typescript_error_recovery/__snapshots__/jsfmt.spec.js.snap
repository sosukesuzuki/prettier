// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generic.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
f1<>();

new f2<>();

function f3<>() {}

class f4 {
    constructor<>() {}
}

const f5 = function<>() {}

interface f6<> {
    test<>();
}

class f7<> {
    test<>() {}
}

=====================================output=====================================
f1<>();

new f2<>();

function f3<>() {}

class f4 {
  constructor<>() {}
}

const f5 = function <>() {};

interface f6<> {
  test<>();
}

class f7<> {
  test<>() {}
}

================================================================================
`;

exports[`generic.ts 2`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
f1<>();

new f2<>();

function f3<>() {}

class f4 {
    constructor<>() {}
}

const f5 = function<>() {}

interface f6<> {
    test<>();
}

class f7<> {
    test<>() {}
}

=====================================output=====================================
f1<>();

new f2<>();

function f3<>() {}

class f4 {
  constructor<>() {}
}

const f5 = function <>() {};

interface f6<> {
  test<>();
}

class f7<> {
  test<>() {}
}

================================================================================
`;

exports[`generic.ts 3`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
f1<>();

new f2<>();

function f3<>() {}

class f4 {
    constructor<>() {}
}

const f5 = function<>() {}

interface f6<> {
    test<>();
}

class f7<> {
    test<>() {}
}

=====================================output=====================================
f1<>();

new f2<>();

function f3<>() {}

class f4 {
  constructor<>() {}
}

const f5 = function <>() {};

interface f6<> {
  test<>();
}

class f7<> {
  test<>() {}
}

================================================================================
`;

exports[`index-signature.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
type A = { [key: string] };

type TwoParams = {
  [a: string, b: string]: string;
};
type ThreeParams = {
  [a: string, b: string, c: string]: string;
};

type TooLong = {
  [loooooooooooooooooooooooooong: string, looooooooooooooooooooooooooooooooooooooong: string]: string;
}
type TooLong81 = { [loooooooooooooooooooooooooong: string, loooooooooooooooooong: string]: string; }
type TooLong80 = { [loooooooooooooooooooooooooong: string, looooooooooooooooong: string]: string; }

=====================================output=====================================
type A = { [key: string] };

type TwoParams = {
  [a: string, b: string]: string;
};
type ThreeParams = {
  [a: string, b: string, c: string]: string;
};

type TooLong = {
  [
    loooooooooooooooooooooooooong: string,
    looooooooooooooooooooooooooooooooooooooong: string,
  ]: string;
};
type TooLong81 = {
  [
    loooooooooooooooooooooooooong: string,
    loooooooooooooooooong: string,
  ]: string;
};
type TooLong80 = {
  [loooooooooooooooooooooooooong: string, looooooooooooooooong: string]: string;
};

================================================================================
`;

exports[`index-signature.ts 2`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
type A = { [key: string] };

type TwoParams = {
  [a: string, b: string]: string;
};
type ThreeParams = {
  [a: string, b: string, c: string]: string;
};

type TooLong = {
  [loooooooooooooooooooooooooong: string, looooooooooooooooooooooooooooooooooooooong: string]: string;
}
type TooLong81 = { [loooooooooooooooooooooooooong: string, loooooooooooooooooong: string]: string; }
type TooLong80 = { [loooooooooooooooooooooooooong: string, looooooooooooooooong: string]: string; }

=====================================output=====================================
type A = { [key: string] };

type TwoParams = {
  [a: string, b: string]: string;
};
type ThreeParams = {
  [a: string, b: string, c: string]: string;
};

type TooLong = {
  [
    loooooooooooooooooooooooooong: string,
    looooooooooooooooooooooooooooooooooooooong: string,
  ]: string;
};
type TooLong81 = {
  [
    loooooooooooooooooooooooooong: string,
    loooooooooooooooooong: string,
  ]: string;
};
type TooLong80 = {
  [loooooooooooooooooooooooooong: string, looooooooooooooooong: string]: string;
};

================================================================================
`;

exports[`index-signature.ts 3`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
type A = { [key: string] };

type TwoParams = {
  [a: string, b: string]: string;
};
type ThreeParams = {
  [a: string, b: string, c: string]: string;
};

type TooLong = {
  [loooooooooooooooooooooooooong: string, looooooooooooooooooooooooooooooooooooooong: string]: string;
}
type TooLong81 = { [loooooooooooooooooooooooooong: string, loooooooooooooooooong: string]: string; }
type TooLong80 = { [loooooooooooooooooooooooooong: string, looooooooooooooooong: string]: string; }

=====================================output=====================================
type A = { [key: string] };

type TwoParams = {
  [a: string, b: string]: string;
};
type ThreeParams = {
  [a: string, b: string, c: string]: string;
};

type TooLong = {
  [
    loooooooooooooooooooooooooong: string,
    looooooooooooooooooooooooooooooooooooooong: string,
  ]: string;
};
type TooLong81 = {
  [
    loooooooooooooooooooooooooong: string,
    loooooooooooooooooong: string,
  ]: string;
};
type TooLong80 = {
  [loooooooooooooooooooooooooong: string, looooooooooooooooong: string]: string;
};

================================================================================
`;

exports[`jsdoc_only_types.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
let a: *;
function b(x: ?) {}
let c: ?string;
let d: string?;
let e: ?(string | number);
let f: !string;
let g: string!;
let h: !(string | number);
let i: function(): string;
let j: (function(): string) | number;

=====================================output=====================================
let a: *;
function b(x: ?) {}
let c: ?string;
let d: ?string;
let e: ?(string | number);
let f: !string;
let g: !string;
let h: !(string | number);
let i: function(): string;
let j: (function(): string) | number;

================================================================================
`;

exports[`jsdoc_only_types.ts 2`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "es5"
                                                                                | printWidth
=====================================input======================================
let a: *;
function b(x: ?) {}
let c: ?string;
let d: string?;
let e: ?(string | number);
let f: !string;
let g: string!;
let h: !(string | number);
let i: function(): string;
let j: (function(): string) | number;

=====================================output=====================================
let a: *;
function b(x: ?) {}
let c: ?string;
let d: ?string;
let e: ?(string | number);
let f: !string;
let g: !string;
let h: !(string | number);
let i: function(): string;
let j: (function(): string) | number;

================================================================================
`;

exports[`jsdoc_only_types.ts 3`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
trailingComma: "all"
                                                                                | printWidth
=====================================input======================================
let a: *;
function b(x: ?) {}
let c: ?string;
let d: string?;
let e: ?(string | number);
let f: !string;
let g: string!;
let h: !(string | number);
let i: function(): string;
let j: (function(): string) | number;

=====================================output=====================================
let a: *;
function b(x: ?) {}
let c: ?string;
let d: ?string;
let e: ?(string | number);
let f: !string;
let g: !string;
let h: !(string | number);
let i: function(): string;
let j: (function(): string) | number;

================================================================================
`;
