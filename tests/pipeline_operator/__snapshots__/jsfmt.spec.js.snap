// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fsharp_style_pipeline_operator.js 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

const user = url
  |> api.get
  |> await
  |> r => r.json()
  |> await
  |> j => j.data.user;

=====================================output=====================================
promise
  |> await
  |> (x) => doubleSay(x, ", ")
  |> capitalize
  |> (x) => x + "!"
  |> (x) => new User.Message(x)
  |> (x) => stream.write(x)
  |> await
  |> console.log;

const result = "hello" |> doubleSay |> capitalize |> exclaim;

const newScore =
  person.score |> double |> (n) => add(7, n) |> (n) => boundScore(0, 100, n);

const user =
  url |> api.get |> await |> (r) => r.json() |> await |> (j) => j.data.user;

================================================================================
`;

exports[`minimal_pipeline_operator.js 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a |> b |> c;

a |> (b |> c);

(a |> b) || c;
a |> (b || c);

let result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

let newScore = person.score
  |> double
  |> (_ => add(7, _))
  |> (_ => subtract(2, _))
  |> (_ => boundScore(0, 100, _));

function createPerson (attrs) {
  attrs
    |> bounded('age', 1, 100)
    |> format('name', /^[a-z]$/i)
    |> Person.insertIntoDatabase;
}

foo |> (bar ?? baz);
(foo |> bar) ?? baz;

=====================================output=====================================
a |> b |> c;

a |> (b |> c);

(a |> b) || c;
a |> b || c;

let result = "hello" |> doubleSay |> capitalize |> exclaim;

let newScore =
  person.score
  |> double
  |> ((_) => add(7, _))
  |> ((_) => subtract(2, _))
  |> ((_) => boundScore(0, 100, _));

function createPerson(attrs) {
  attrs
    |> bounded("age", 1, 100)
    |> format("name", /^[a-z]$/i)
    |> Person.insertIntoDatabase;
}

foo |> bar ?? baz;
(foo |> bar) ?? baz;

================================================================================
`;

exports[`smart_pipeline_operator.js 1`] = `
====================================options=====================================
parsers: ["babel"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a |> await # |> # * 3;

foo
  |> await #
  |> # || throw new Error(\`foo \${bar1}\`)
  |> bar2(#, ", ")
  |> bar3
  |> # + "!"
  |> new Bar.Foo(#)
  |> await bar.bar(#)
  |> console.log;

const result = "hello"
  |> doubleSay
  |> capitalize(#, "foo")
  |> exclaim;

function createPerson (attrs) {
  attrs
    |> foo
    |> foo
    |> Person.insertIntoDatabase;
}

=====================================output=====================================
a |> await # |> # * 3;

foo
  |> await #
  |> # || throw new Error(\`foo \${bar1}\`)
  |> bar2(#, ", ")
  |> bar3
  |> # + "!"
  |> new Bar.Foo(#)
  |> await bar.bar(#)
  |> console.log;

const result = "hello" |> doubleSay |> capitalize(#, "foo") |> exclaim;

function createPerson(attrs) {
  attrs |> foo |> foo |> Person.insertIntoDatabase;
}

================================================================================
`;
