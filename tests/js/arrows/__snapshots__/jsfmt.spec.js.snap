// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow_function_expression.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(a => {}).length
typeof (() => {});
export default (() => {})();
(() => {})()\`\`;
(() => {})\`\`;
new (() => {});
if ((() => {}) ? 1 : 0) {}
let f = () => ({}())
let a = () => ({} instanceof a);
a = () => ({} && a);
a = () => ({}() && a);
a = () => ({} && a && b);
a = () => ({} + a);
a = () => ({}()() && a);
a = () => ({}.b && a);
a = () => ({}[b] && a);
a = () => ({}\`\` && a);
a = () => ({} = 0);
a = () => ({}, a);
a => a instanceof {};
a => ({}().b && 0)
a => ({}().c = 0)
x => ({}()())
x => ({}()\`\`)
x => ({}().b);
a = b => c;
x => (y = z);
x => (y += z);
f(a => ({})) + 1;
(a => ({})) || 0;
a = b => c;
a = b => {
  return c
};

=====================================output=====================================
((a) => {}).length;
typeof (() => {});
export default (() => {})();
(() => {})()\`\`;
(() => {})\`\`;
new (() => {})();
if ((() => {}) ? 1 : 0) {
}
let f = () => ({}());
let a = () => ({} instanceof a);
a = () => ({} && a);
a = () => ({}() && a);
a = () => ({} && a && b);
a = () => ({} + a);
a = () => ({}()() && a);
a = () => ({}.b && a);
a = () => ({}[b] && a);
a = () => ({}\`\` && a);
a = () => ({} = 0);
a = () => ({}, a);
(a) => a instanceof {};
(a) => ({}().b && 0);
(a) => ({}().c = 0);
(x) => ({}()());
(x) => ({}()\`\`);
(x) => ({}().b);
a = (b) => c;
(x) => (y = z);
(x) => (y += z);
f((a) => ({})) + 1;
((a) => ({})) || 0;
a = (b) => c;
a = (b) => {
  return c;
};

================================================================================
`;

exports[`arrow_function_expression.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
(a => {}).length
typeof (() => {});
export default (() => {})();
(() => {})()\`\`;
(() => {})\`\`;
new (() => {});
if ((() => {}) ? 1 : 0) {}
let f = () => ({}())
let a = () => ({} instanceof a);
a = () => ({} && a);
a = () => ({}() && a);
a = () => ({} && a && b);
a = () => ({} + a);
a = () => ({}()() && a);
a = () => ({}.b && a);
a = () => ({}[b] && a);
a = () => ({}\`\` && a);
a = () => ({} = 0);
a = () => ({}, a);
a => a instanceof {};
a => ({}().b && 0)
a => ({}().c = 0)
x => ({}()())
x => ({}()\`\`)
x => ({}().b);
a = b => c;
x => (y = z);
x => (y += z);
f(a => ({})) + 1;
(a => ({})) || 0;
a = b => c;
a = b => {
  return c
};

=====================================output=====================================
(a => {}).length;
typeof (() => {});
export default (() => {})();
(() => {})()\`\`;
(() => {})\`\`;
new (() => {})();
if ((() => {}) ? 1 : 0) {
}
let f = () => ({}());
let a = () => ({} instanceof a);
a = () => ({} && a);
a = () => ({}() && a);
a = () => ({} && a && b);
a = () => ({} + a);
a = () => ({}()() && a);
a = () => ({}.b && a);
a = () => ({}[b] && a);
a = () => ({}\`\` && a);
a = () => ({} = 0);
a = () => ({}, a);
a => a instanceof {};
a => ({}().b && 0);
a => ({}().c = 0);
x => ({}()());
x => ({}()\`\`);
x => ({}().b);
a = b => c;
x => (y = z);
x => (y += z);
f(a => ({})) + 1;
(a => ({})) || 0;
a = b => c;
a = b => {
  return c;
};

================================================================================
`;

exports[`block_like.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a = () => ({} = this);

=====================================output=====================================
a = () => ({} = this);

================================================================================
`;

exports[`block_like.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
a = () => ({} = this);

=====================================output=====================================
a = () => ({} = this);

================================================================================
`;

exports[`call.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
Seq(typeDef.interface.groups).forEach(group =>
  Seq(group.members).forEach((member, memberName) =>
    markdownDoc(
      member.doc,
      { typePath: typePath.concat(memberName.slice(1)),
       signatures: member.signatures }
    )
  )
)

const promiseFromCallback = fn =>
  new Promise((resolve, reject) =>
    fn((err, result) => {
      if (err) return reject(err);
      return resolve(result);
    })
  );

runtimeAgent.getProperties(
  objectId,
  false, // ownProperties
  false, // accessorPropertiesOnly
  false, // generatePreview
  (error, properties, internalProperties) => {
    return 1
  },
);

function render() {
  return (
    <View>
      <Image
        onProgress={(e) => this.setState({progress: Math.round(100 * e.nativeEvent.loaded / e.nativeEvent.total)})}
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              100 * e.nativeEvent.loaded / e.nativeEvent.total,
            ),
          })}
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              100 * e.nativeEvent.loaded / e.nativeEvent.total,
            ),
          })}
      />
    </View>
  );
}

jest.mock(
  '../SearchSource',
  () => class {
    findMatchingTests(pattern) {
      return {paths: []};
    }
  },
);

fooooooooooooooooooooooooooooooooooooooooooooooooooo(action => next =>
    dispatch(action),
);

foo(
  ({
    a,

    b
  }) => {}
);

foo(
  ({
    a,
    b

  }) => {}
);

foo(
  ({
    a,
    b
  }) => {}
);

foo(
  a,
  ({
    a,

    b
  }) => {}
)

foo(
  ({
    a,

    b
  }) => a
);

foo(
  ({
    a,
    b
  }) => a
);

foo(
  ({
    a,
    b

  }) => a
);

foo(
  ({
    a: {
      a,

      b
    }
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c,

        d
      }
    }
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e
        }
      }
    }
  }) => {}
);

foo(
  ({
    a: {
      a,

      b
    }
  }) => a
);

foo(
  ({
    a: {
      b: {
        c,

        d
      }
    }
  }) => a
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e
        }
      }
    }
  }) => a
);

foo(
  ([
    {
      a: {
        b: {
          c: {
            d,

            e
          }
        }
      }
    }
  ]) => {}
);

foo(
  ([
    ...{
      a: {
        b: {
          c: {
            d,

            e
          }
        }
      }
    }
  ]) => {}
);

foo(
  (
    n = {
      a: {
        b: {
          c: {
            d,

            e
          }
        }
      }
    }
  ) => {}
);

foo(
  ({
    x: [
      {
        a,

        b
      }
    ]
  }) => {}
);

foo(
  (
    a = [
      {
        a,

        b
      }
    ]
  ) => a
);

foo(
  ([
    [
      {
        a,

        b
      }
    ]
  ]) => {}
);

foo(
  ([
    [
      [
        [
          {
            a,
            b: {
              c,
              d: {
                e,

                f
              }
            }
          }
        ]
      ]
    ]
  ]) => {}
);

foo(
  (
    ...{
      a,

      b
    }
  ) => {}
);

foo(
  (
    ...[
      {
        a,

        b
      }
    ]
  ) => {}
);

foo(
  ([
    ...[
      {
        a,

        b
      }
    ]
  ]) => {}
);

foo(
  (
    a = [{
      a,

      b
    }]
  ) => {}
);

foo(
  (
    a = (({
      a,

      b
    }) => {})()
  ) => {}
);

foo(
  (
    a = f({
      a,

      b
    })
  ) => {}
);

foo(
  (
    a = ({
      a,

      b
    }) => {}
  ) => {}
);

foo(
  (
    a = 1 +
      f({
        a,

        b
      })
  ) => {}
);

=====================================output=====================================
Seq(typeDef.interface.groups).forEach((group) =>
  Seq(group.members).forEach((member, memberName) =>
    markdownDoc(member.doc, {
      typePath: typePath.concat(memberName.slice(1)),
      signatures: member.signatures,
    })
  )
);

const promiseFromCallback = (fn) =>
  new Promise((resolve, reject) =>
    fn((err, result) => {
      if (err) return reject(err);
      return resolve(result);
    })
  );

runtimeAgent.getProperties(
  objectId,
  false, // ownProperties
  false, // accessorPropertiesOnly
  false, // generatePreview
  (error, properties, internalProperties) => {
    return 1;
  }
);

function render() {
  return (
    <View>
      <Image
        onProgress={(e) =>
          this.setState({
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            ),
          })
        }
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={(e) =>
          this.setState({
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            ),
          })
        }
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={(e) =>
          this.setState({
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            ),
          })
        }
      />
    </View>
  );
}

jest.mock(
  "../SearchSource",
  () =>
    class {
      findMatchingTests(pattern) {
        return { paths: [] };
      }
    }
);

fooooooooooooooooooooooooooooooooooooooooooooooooooo((action) => (next) =>
  dispatch(action)
);

foo(
  ({
    a,

    b,
  }) => {}
);

foo(({ a, b }) => {});

foo(({ a, b }) => {});

foo(
  a,
  ({
    a,

    b,
  }) => {}
);

foo(
  ({
    a,

    b,
  }) => a
);

foo(({ a, b }) => a);

foo(({ a, b }) => a);

foo(
  ({
    a: {
      a,

      b,
    },
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c,

        d,
      },
    },
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e,
        },
      },
    },
  }) => {}
);

foo(
  ({
    a: {
      a,

      b,
    },
  }) => a
);

foo(
  ({
    a: {
      b: {
        c,

        d,
      },
    },
  }) => a
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e,
        },
      },
    },
  }) => a
);

foo(
  ([
    {
      a: {
        b: {
          c: {
            d,

            e,
          },
        },
      },
    },
  ]) => {}
);

foo(
  ([
    ...{
      a: {
        b: {
          c: {
            d,

            e,
          },
        },
      },
    }
  ]) => {}
);

foo(
  (
    n = {
      a: {
        b: {
          c: {
            d,

            e,
          },
        },
      },
    }
  ) => {}
);

foo(
  ({
    x: [
      {
        a,

        b,
      },
    ],
  }) => {}
);

foo(
  (
    a = [
      {
        a,

        b,
      },
    ]
  ) => a
);

foo(
  ([
    [
      {
        a,

        b,
      },
    ],
  ]) => {}
);

foo(
  ([
    [
      [
        [
          {
            a,
            b: {
              c,
              d: {
                e,

                f,
              },
            },
          },
        ],
      ],
    ],
  ]) => {}
);

foo(
  (
    ...{
      a,

      b,
    }
  ) => {}
);

foo(
  (
    ...[
      {
        a,

        b,
      },
    ]
  ) => {}
);

foo(
  ([
    ...[
      {
        a,

        b,
      },
    ]
  ]) => {}
);

foo(
  (
    a = [
      {
        a,

        b,
      },
    ]
  ) => {}
);

foo(
  (
    a = (({
      a,

      b,
    }) => {})()
  ) => {}
);

foo(
  (
    a = f({
      a,

      b,
    })
  ) => {}
);

foo(
  (
    a = ({
      a,

      b,
    }) => {}
  ) => {}
);

foo(
  (
    a = 1 +
      f({
        a,

        b,
      })
  ) => {}
);

================================================================================
`;

exports[`call.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
Seq(typeDef.interface.groups).forEach(group =>
  Seq(group.members).forEach((member, memberName) =>
    markdownDoc(
      member.doc,
      { typePath: typePath.concat(memberName.slice(1)),
       signatures: member.signatures }
    )
  )
)

const promiseFromCallback = fn =>
  new Promise((resolve, reject) =>
    fn((err, result) => {
      if (err) return reject(err);
      return resolve(result);
    })
  );

runtimeAgent.getProperties(
  objectId,
  false, // ownProperties
  false, // accessorPropertiesOnly
  false, // generatePreview
  (error, properties, internalProperties) => {
    return 1
  },
);

function render() {
  return (
    <View>
      <Image
        onProgress={(e) => this.setState({progress: Math.round(100 * e.nativeEvent.loaded / e.nativeEvent.total)})}
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              100 * e.nativeEvent.loaded / e.nativeEvent.total,
            ),
          })}
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              100 * e.nativeEvent.loaded / e.nativeEvent.total,
            ),
          })}
      />
    </View>
  );
}

jest.mock(
  '../SearchSource',
  () => class {
    findMatchingTests(pattern) {
      return {paths: []};
    }
  },
);

fooooooooooooooooooooooooooooooooooooooooooooooooooo(action => next =>
    dispatch(action),
);

foo(
  ({
    a,

    b
  }) => {}
);

foo(
  ({
    a,
    b

  }) => {}
);

foo(
  ({
    a,
    b
  }) => {}
);

foo(
  a,
  ({
    a,

    b
  }) => {}
)

foo(
  ({
    a,

    b
  }) => a
);

foo(
  ({
    a,
    b
  }) => a
);

foo(
  ({
    a,
    b

  }) => a
);

foo(
  ({
    a: {
      a,

      b
    }
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c,

        d
      }
    }
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e
        }
      }
    }
  }) => {}
);

foo(
  ({
    a: {
      a,

      b
    }
  }) => a
);

foo(
  ({
    a: {
      b: {
        c,

        d
      }
    }
  }) => a
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e
        }
      }
    }
  }) => a
);

foo(
  ([
    {
      a: {
        b: {
          c: {
            d,

            e
          }
        }
      }
    }
  ]) => {}
);

foo(
  ([
    ...{
      a: {
        b: {
          c: {
            d,

            e
          }
        }
      }
    }
  ]) => {}
);

foo(
  (
    n = {
      a: {
        b: {
          c: {
            d,

            e
          }
        }
      }
    }
  ) => {}
);

foo(
  ({
    x: [
      {
        a,

        b
      }
    ]
  }) => {}
);

foo(
  (
    a = [
      {
        a,

        b
      }
    ]
  ) => a
);

foo(
  ([
    [
      {
        a,

        b
      }
    ]
  ]) => {}
);

foo(
  ([
    [
      [
        [
          {
            a,
            b: {
              c,
              d: {
                e,

                f
              }
            }
          }
        ]
      ]
    ]
  ]) => {}
);

foo(
  (
    ...{
      a,

      b
    }
  ) => {}
);

foo(
  (
    ...[
      {
        a,

        b
      }
    ]
  ) => {}
);

foo(
  ([
    ...[
      {
        a,

        b
      }
    ]
  ]) => {}
);

foo(
  (
    a = [{
      a,

      b
    }]
  ) => {}
);

foo(
  (
    a = (({
      a,

      b
    }) => {})()
  ) => {}
);

foo(
  (
    a = f({
      a,

      b
    })
  ) => {}
);

foo(
  (
    a = ({
      a,

      b
    }) => {}
  ) => {}
);

foo(
  (
    a = 1 +
      f({
        a,

        b
      })
  ) => {}
);

=====================================output=====================================
Seq(typeDef.interface.groups).forEach(group =>
  Seq(group.members).forEach((member, memberName) =>
    markdownDoc(member.doc, {
      typePath: typePath.concat(memberName.slice(1)),
      signatures: member.signatures,
    })
  )
);

const promiseFromCallback = fn =>
  new Promise((resolve, reject) =>
    fn((err, result) => {
      if (err) return reject(err);
      return resolve(result);
    })
  );

runtimeAgent.getProperties(
  objectId,
  false, // ownProperties
  false, // accessorPropertiesOnly
  false, // generatePreview
  (error, properties, internalProperties) => {
    return 1;
  }
);

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            ),
          })
        }
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            ),
          })
        }
      />
    </View>
  );
}

function render() {
  return (
    <View>
      <Image
        onProgress={e =>
          this.setState({
            progress: Math.round(
              (100 * e.nativeEvent.loaded) / e.nativeEvent.total
            ),
          })
        }
      />
    </View>
  );
}

jest.mock(
  "../SearchSource",
  () =>
    class {
      findMatchingTests(pattern) {
        return { paths: [] };
      }
    }
);

fooooooooooooooooooooooooooooooooooooooooooooooooooo(action => next =>
  dispatch(action)
);

foo(
  ({
    a,

    b,
  }) => {}
);

foo(({ a, b }) => {});

foo(({ a, b }) => {});

foo(
  a,
  ({
    a,

    b,
  }) => {}
);

foo(
  ({
    a,

    b,
  }) => a
);

foo(({ a, b }) => a);

foo(({ a, b }) => a);

foo(
  ({
    a: {
      a,

      b,
    },
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c,

        d,
      },
    },
  }) => {}
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e,
        },
      },
    },
  }) => {}
);

foo(
  ({
    a: {
      a,

      b,
    },
  }) => a
);

foo(
  ({
    a: {
      b: {
        c,

        d,
      },
    },
  }) => a
);

foo(
  ({
    a: {
      b: {
        c: {
          d,

          e,
        },
      },
    },
  }) => a
);

foo(
  ([
    {
      a: {
        b: {
          c: {
            d,

            e,
          },
        },
      },
    },
  ]) => {}
);

foo(
  ([
    ...{
      a: {
        b: {
          c: {
            d,

            e,
          },
        },
      },
    }
  ]) => {}
);

foo(
  (
    n = {
      a: {
        b: {
          c: {
            d,

            e,
          },
        },
      },
    }
  ) => {}
);

foo(
  ({
    x: [
      {
        a,

        b,
      },
    ],
  }) => {}
);

foo(
  (
    a = [
      {
        a,

        b,
      },
    ]
  ) => a
);

foo(
  ([
    [
      {
        a,

        b,
      },
    ],
  ]) => {}
);

foo(
  ([
    [
      [
        [
          {
            a,
            b: {
              c,
              d: {
                e,

                f,
              },
            },
          },
        ],
      ],
    ],
  ]) => {}
);

foo(
  (
    ...{
      a,

      b,
    }
  ) => {}
);

foo(
  (
    ...[
      {
        a,

        b,
      },
    ]
  ) => {}
);

foo(
  ([
    ...[
      {
        a,

        b,
      },
    ]
  ]) => {}
);

foo(
  (
    a = [
      {
        a,

        b,
      },
    ]
  ) => {}
);

foo(
  (
    a = (({
      a,

      b,
    }) => {})()
  ) => {}
);

foo(
  (
    a = f({
      a,

      b,
    })
  ) => {}
);

foo(
  (
    a = ({
      a,

      b,
    }) => {}
  ) => {}
);

foo(
  (
    a = 1 +
      f({
        a,

        b,
      })
  ) => {}
);

================================================================================
`;

exports[`comment.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/**
 * Curried function that ends with a BEM CSS Selector
 *
 * @param {String} block - the BEM Block you'd like to select.
 * @returns {Function}
 */
export const bem = block =>
  /**
   * @param {String} [element] - the BEM Element within that block; if undefined, selects the block itself.
   * @returns {Function}
   */
  element =>
    /**
     * @param {?String} [modifier] - the BEM Modifier for the Block or Element; if undefined, selects the Block or Element unmodified.
     * @returns {String}
     */
    modifier =>
      [
        ".",
        css(block),
        element ? \`__\${css(element)}\` : "",
        modifier ? \`--\${css(modifier)}\` : ""
      ].join("");

<FlatList
  renderItem={(
    info, // $FlowExpectedError - bad widgetCount type 6, should be Object
  ) => <span>{info.item.widget.missingProp}</span>}
  data={data}
/>

=====================================output=====================================
/**
 * Curried function that ends with a BEM CSS Selector
 *
 * @param {String} block - the BEM Block you'd like to select.
 * @returns {Function}
 */
export const bem = (block) =>
  /**
   * @param {String} [element] - the BEM Element within that block; if undefined, selects the block itself.
   * @returns {Function}
   */
  (element) =>
    /**
     * @param {?String} [modifier] - the BEM Modifier for the Block or Element; if undefined, selects the Block or Element unmodified.
     * @returns {String}
     */
    (modifier) =>
      [
        ".",
        css(block),
        element ? \`__\${css(element)}\` : "",
        modifier ? \`--\${css(modifier)}\` : "",
      ].join("");

<FlatList
  renderItem={(
    info // $FlowExpectedError - bad widgetCount type 6, should be Object
  ) => <span>{info.item.widget.missingProp}</span>}
  data={data}
/>;

================================================================================
`;

exports[`comment.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/**
 * Curried function that ends with a BEM CSS Selector
 *
 * @param {String} block - the BEM Block you'd like to select.
 * @returns {Function}
 */
export const bem = block =>
  /**
   * @param {String} [element] - the BEM Element within that block; if undefined, selects the block itself.
   * @returns {Function}
   */
  element =>
    /**
     * @param {?String} [modifier] - the BEM Modifier for the Block or Element; if undefined, selects the Block or Element unmodified.
     * @returns {String}
     */
    modifier =>
      [
        ".",
        css(block),
        element ? \`__\${css(element)}\` : "",
        modifier ? \`--\${css(modifier)}\` : ""
      ].join("");

<FlatList
  renderItem={(
    info, // $FlowExpectedError - bad widgetCount type 6, should be Object
  ) => <span>{info.item.widget.missingProp}</span>}
  data={data}
/>

=====================================output=====================================
/**
 * Curried function that ends with a BEM CSS Selector
 *
 * @param {String} block - the BEM Block you'd like to select.
 * @returns {Function}
 */
export const bem = block =>
  /**
   * @param {String} [element] - the BEM Element within that block; if undefined, selects the block itself.
   * @returns {Function}
   */
  element =>
    /**
     * @param {?String} [modifier] - the BEM Modifier for the Block or Element; if undefined, selects the Block or Element unmodified.
     * @returns {String}
     */
    modifier =>
      [
        ".",
        css(block),
        element ? \`__\${css(element)}\` : "",
        modifier ? \`--\${css(modifier)}\` : "",
      ].join("");

<FlatList
  renderItem={(
    info // $FlowExpectedError - bad widgetCount type 6, should be Object
  ) => <span>{info.item.widget.missingProp}</span>}
  data={data}
/>;

================================================================================
`;

exports[`curries.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const fn1 = a => 3;
const fn2 = a => b => 3;
const fn3 = a => b => c => 3;
const fn4 = a => b => c => d => 3;
const fn5 = a => b => c => d => e => 3;
const fn6 = a => b => c => d => e => g => 3;
const fn7 = a => b => c => d => e => g => f => 3;

const fn8 = a => ({ foo: bar, bar: baz, baz: foo });
const fn9 = a => b => ({ foo: bar, bar: baz, baz: foo });
const fn10 = a => b => c => ({ foo: bar, bar: baz, baz: foo });
const fn11 = a => b => c => d => ({ foo: bar, bar: baz, baz: foo });
const fn12 = a => b => c => d => e => ({ foo: bar, bar: baz, baz: foo });
const fn13 = a => b => c => d => e => g => ({ foo: bar, bar: baz, baz: foo });
const fn14 = a => b => c => d => e => g => f => ({ foo: bar, bar: baz, baz: foo });

const curryTest =
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) =>
      ({
        foo: argument1,
        bar: argument2,
      });

let curryTest2 =
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => {
      const foo = "foo";
      return foo + "bar";
    };

curryTest2 =
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => {
      const foo = "foo";
      return foo + "bar";
    };

throw (argument1) =>
(argument2) =>
(argument3) =>
(argument4) =>
(argument5) =>
(argument6) =>
(argument7) =>
(argument8) =>
(argument9) =>
(argument10) =>
(argument11) =>
(argument12) => {
  const foo = "foo";
  return foo + "bar";
};

foo((argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => 3);

foo((argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => ({
        foo: bar,
        bar: baz,
        baz: foo
    }));

foo(
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => {
      const foo = "foo";
      return foo + "bar";
    }
);

((argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => 3)(3);

bar(
  foo(
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => ({
      foo: bar,
      bar: baz,
    })
  )
);

=====================================output=====================================
const fn1 = (a) => 3;
const fn2 = (a) => (b) => 3;
const fn3 = (a) => (b) => (c) => 3;
const fn4 = (a) => (b) => (c) => (d) => 3;
const fn5 = (a) => (b) => (c) => (d) => (e) => 3;
const fn6 = (a) => (b) => (c) => (d) => (e) => (g) => 3;
const fn7 = (a) => (b) => (c) => (d) => (e) => (g) => (f) => 3;

const fn8 = (a) => ({ foo: bar, bar: baz, baz: foo });
const fn9 = (a) => (b) => ({ foo: bar, bar: baz, baz: foo });
const fn10 = (a) => (b) => (c) => ({ foo: bar, bar: baz, baz: foo });
const fn11 = (a) => (b) => (c) => (d) => ({ foo: bar, bar: baz, baz: foo });
const fn12 =
  (a) =>
  (b) =>
  (c) =>
  (d) =>
  (e) => ({ foo: bar, bar: baz, baz: foo });
const fn13 =
  (a) =>
  (b) =>
  (c) =>
  (d) =>
  (e) =>
  (g) => ({ foo: bar, bar: baz, baz: foo });
const fn14 =
  (a) =>
  (b) =>
  (c) =>
  (d) =>
  (e) =>
  (g) =>
  (f) => ({ foo: bar, bar: baz, baz: foo });

const curryTest =
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => ({
    foo: argument1,
    bar: argument2,
  });

let curryTest2 =
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => {
    const foo = "foo";
    return foo + "bar";
  };

curryTest2 =
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => {
    const foo = "foo";
    return foo + "bar";
  };

throw (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => {
    const foo = "foo";
    return foo + "bar";
  };

foo(
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => 3
);

foo(
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => ({
    foo: bar,
    bar: baz,
    baz: foo,
  })
);

foo(
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => {
    const foo = "foo";
    return foo + "bar";
  }
);

(
  (argument1) =>
  (argument2) =>
  (argument3) =>
  (argument4) =>
  (argument5) =>
  (argument6) =>
  (argument7) =>
  (argument8) =>
  (argument9) =>
  (argument10) =>
  (argument11) =>
  (argument12) => 3
)(3);

bar(
  foo(
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => ({
      foo: bar,
      bar: baz,
    })
  )
);

================================================================================
`;

exports[`curries.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const fn1 = a => 3;
const fn2 = a => b => 3;
const fn3 = a => b => c => 3;
const fn4 = a => b => c => d => 3;
const fn5 = a => b => c => d => e => 3;
const fn6 = a => b => c => d => e => g => 3;
const fn7 = a => b => c => d => e => g => f => 3;

const fn8 = a => ({ foo: bar, bar: baz, baz: foo });
const fn9 = a => b => ({ foo: bar, bar: baz, baz: foo });
const fn10 = a => b => c => ({ foo: bar, bar: baz, baz: foo });
const fn11 = a => b => c => d => ({ foo: bar, bar: baz, baz: foo });
const fn12 = a => b => c => d => e => ({ foo: bar, bar: baz, baz: foo });
const fn13 = a => b => c => d => e => g => ({ foo: bar, bar: baz, baz: foo });
const fn14 = a => b => c => d => e => g => f => ({ foo: bar, bar: baz, baz: foo });

const curryTest =
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) =>
      ({
        foo: argument1,
        bar: argument2,
      });

let curryTest2 =
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => {
      const foo = "foo";
      return foo + "bar";
    };

curryTest2 =
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => {
      const foo = "foo";
      return foo + "bar";
    };

throw (argument1) =>
(argument2) =>
(argument3) =>
(argument4) =>
(argument5) =>
(argument6) =>
(argument7) =>
(argument8) =>
(argument9) =>
(argument10) =>
(argument11) =>
(argument12) => {
  const foo = "foo";
  return foo + "bar";
};

foo((argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => 3);

foo((argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => ({
        foo: bar,
        bar: baz,
        baz: foo
    }));

foo(
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => {
      const foo = "foo";
      return foo + "bar";
    }
);

((argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => 3)(3);

bar(
  foo(
    (argument1) =>
    (argument2) =>
    (argument3) =>
    (argument4) =>
    (argument5) =>
    (argument6) =>
    (argument7) =>
    (argument8) =>
    (argument9) =>
    (argument10) =>
    (argument11) =>
    (argument12) => ({
      foo: bar,
      bar: baz,
    })
  )
);

=====================================output=====================================
const fn1 = a => 3;
const fn2 = a => b => 3;
const fn3 = a => b => c => 3;
const fn4 = a => b => c => d => 3;
const fn5 = a => b => c => d => e => 3;
const fn6 = a => b => c => d => e => g => 3;
const fn7 = a => b => c => d => e => g => f => 3;

const fn8 = a => ({ foo: bar, bar: baz, baz: foo });
const fn9 = a => b => ({ foo: bar, bar: baz, baz: foo });
const fn10 = a => b => c => ({ foo: bar, bar: baz, baz: foo });
const fn11 = a => b => c => d => ({ foo: bar, bar: baz, baz: foo });
const fn12 = a => b => c => d => e => ({ foo: bar, bar: baz, baz: foo });
const fn13 = a => b => c => d => e => g => ({ foo: bar, bar: baz, baz: foo });
const fn14 =
  a =>
  b =>
  c =>
  d =>
  e =>
  g =>
  f => ({ foo: bar, bar: baz, baz: foo });

const curryTest =
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => ({
    foo: argument1,
    bar: argument2,
  });

let curryTest2 =
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => {
    const foo = "foo";
    return foo + "bar";
  };

curryTest2 =
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => {
    const foo = "foo";
    return foo + "bar";
  };

throw argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => {
    const foo = "foo";
    return foo + "bar";
  };

foo(
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => 3
);

foo(
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => ({
    foo: bar,
    bar: baz,
    baz: foo,
  })
);

foo(
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => {
    const foo = "foo";
    return foo + "bar";
  }
);

(
  argument1 =>
  argument2 =>
  argument3 =>
  argument4 =>
  argument5 =>
  argument6 =>
  argument7 =>
  argument8 =>
  argument9 =>
  argument10 =>
  argument11 =>
  argument12 => 3
)(3);

bar(
  foo(
    argument1 =>
    argument2 =>
    argument3 =>
    argument4 =>
    argument5 =>
    argument6 =>
    argument7 =>
    argument8 =>
    argument9 =>
    argument10 =>
    argument11 =>
    argument12 => ({
      foo: bar,
      bar: baz,
    })
  )
);

================================================================================
`;

exports[`currying.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const fn = b => c => d => {
  return 3;
};

const foo = (a, b) => c => d => {
  return 3;
};

const bar = a => b => c => a + b + c

const mw = store => next => action => {
  return next(action)
}

const middleware = options => (req, res, next) => {
  // ...
};

=====================================output=====================================
const fn = (b) => (c) => (d) => {
  return 3;
};

const foo = (a, b) => (c) => (d) => {
  return 3;
};

const bar = (a) => (b) => (c) => a + b + c;

const mw = (store) => (next) => (action) => {
  return next(action);
};

const middleware = (options) => (req, res, next) => {
  // ...
};

================================================================================
`;

exports[`currying.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const fn = b => c => d => {
  return 3;
};

const foo = (a, b) => c => d => {
  return 3;
};

const bar = a => b => c => a + b + c

const mw = store => next => action => {
  return next(action)
}

const middleware = options => (req, res, next) => {
  // ...
};

=====================================output=====================================
const fn = b => c => d => {
  return 3;
};

const foo = (a, b) => c => d => {
  return 3;
};

const bar = a => b => c => a + b + c;

const mw = store => next => action => {
  return next(action);
};

const middleware = options => (req, res, next) => {
  // ...
};

================================================================================
`;

exports[`long-call-no-args.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
veryLongCall(VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_LONG_CONSTANT, () => {})

=====================================output=====================================
veryLongCall(
  VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_LONG_CONSTANT,
  () => {}
);

================================================================================
`;

exports[`long-call-no-args.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
veryLongCall(VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_LONG_CONSTANT, () => {})

=====================================output=====================================
veryLongCall(
  VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_VERY_LONG_CONSTANT,
  () => {}
);

================================================================================
`;

exports[`long-contents.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const foo = () => {
  expect(arg1, arg2, arg3).toEqual({message: 'test', messageType: 'SMS', status: 'Unknown', created: '11/01/2017 13:36'});
};

=====================================output=====================================
const foo = () => {
  expect(arg1, arg2, arg3).toEqual({
    message: "test",
    messageType: "SMS",
    status: "Unknown",
    created: "11/01/2017 13:36",
  });
};

================================================================================
`;

exports[`long-contents.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const foo = () => {
  expect(arg1, arg2, arg3).toEqual({message: 'test', messageType: 'SMS', status: 'Unknown', created: '11/01/2017 13:36'});
};

=====================================output=====================================
const foo = () => {
  expect(arg1, arg2, arg3).toEqual({
    message: "test",
    messageType: "SMS",
    status: "Unknown",
    created: "11/01/2017 13:36",
  });
};

================================================================================
`;

exports[`parens.js - {"arrowParens":"always"} format 1`] = `
====================================options=====================================
arrowParens: "always"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
promise.then(
  (result) => result,
  (err) => err
)

promise.then(
  (result) => { f(); return result },
  (err) => { f(); return err }
)

foo(a => b)
foo(a => { return b })
foo(c, a => b)
foo(c, a => b, d)
foo(a => b, d)

=====================================output=====================================
promise.then(
  (result) => result,
  (err) => err
);

promise.then(
  (result) => {
    f();
    return result;
  },
  (err) => {
    f();
    return err;
  }
);

foo((a) => b);
foo((a) => {
  return b;
});
foo(c, (a) => b);
foo(c, (a) => b, d);
foo((a) => b, d);

================================================================================
`;

exports[`parens.js - {"arrowParens":"avoid"} format 1`] = `
====================================options=====================================
arrowParens: "avoid"
parsers: ["babel", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
promise.then(
  (result) => result,
  (err) => err
)

promise.then(
  (result) => { f(); return result },
  (err) => { f(); return err }
)

foo(a => b)
foo(a => { return b })
foo(c, a => b)
foo(c, a => b, d)
foo(a => b, d)

=====================================output=====================================
promise.then(
  result => result,
  err => err
);

promise.then(
  result => {
    f();
    return result;
  },
  err => {
    f();
    return err;
  }
);

foo(a => b);
foo(a => {
  return b;
});
foo(c, a => b);
foo(c, a => b, d);
foo(a => b, d);

================================================================================
`;
