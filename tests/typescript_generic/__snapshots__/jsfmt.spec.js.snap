// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow-return-type.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssemblyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor | undefined> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributes"] | undefined
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor & undefined> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributes"] & undefined
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor["attributes"]> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributessssssssssssssssssssssss"]
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<keyof Descriptor> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  keyof Collections.Parts.PrintedCircuitBoardAssemblyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor[]> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssemblyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy[]
> => {};

=====================================output=====================================
export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssemblyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor | undefined> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributes"] | undefined
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor & undefined> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributes"] & undefined
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor["attributes"]> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssembly["attributessssssssssssssssssssssss"]
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<keyof Descriptor> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  keyof Collections.Parts.PrintedCircuitBoardAssemblyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<Descriptor[]> => {};

export const getVehicleDescriptor = async (
  vehicleId: string
): Promise<
  Collections.Parts.PrintedCircuitBoardAssemblyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy[]
> => {};

================================================================================
`;

exports[`object-method.ts 1`] = `
====================================options=====================================
parsers: ["typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
export default {
  load<K, T>(k: K, t: T) {
    return {k, t};
  }
}

=====================================output=====================================
export default {
  load<K, T>(k: K, t: T) {
    return { k, t };
  },
};

================================================================================
`;
